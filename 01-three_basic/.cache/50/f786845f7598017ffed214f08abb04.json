{"id":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","dependencies":[{"name":"C:\\Users\\ADMINWWQ\\Desktop\\threejs\\01-three_basic\\package.json","includedInParent":true,"mtime":1713938217714},{"name":"C:\\Users\\ADMINWWQ\\Desktop\\threejs\\01-three_basic\\node_modules\\three\\package.json","includedInParent":true,"mtime":1713854592536},{"name":"three","loc":{"line":3,"column":7,"index":25},"parent":"C:\\Users\\ADMINWWQ\\Desktop\\threejs\\01-three_basic\\node_modules\\three\\examples\\jsm\\shaders\\SobelOperatorShader.js","resolved":"C:\\Users\\ADMINWWQ\\Desktop\\threejs\\01-three_basic\\node_modules\\three\\build\\three.module.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SobelOperatorShader = void 0;\nvar _three = require(\"three\");\n/**\n * Sobel Edge Detection (see https://youtu.be/uihBwtPIBxM)\n *\n * As mentioned in the video the Sobel operator expects a grayscale image as input.\n *\n */\n\nvar SobelOperatorShader = exports.SobelOperatorShader = {\n  name: 'SobelOperatorShader',\n  uniforms: {\n    'tDiffuse': {\n      value: null\n    },\n    'resolution': {\n      value: new _three.Vector2()\n    }\n  },\n  vertexShader: /* glsl */\"\\n\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvUv = uv;\\n\\n\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n\\t\\t}\",\n  fragmentShader: /* glsl */\"\\n\\n\\t\\tuniform sampler2D tDiffuse;\\n\\t\\tuniform vec2 resolution;\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvec2 texel = vec2( 1.0 / resolution.x, 1.0 / resolution.y );\\n\\n\\t\\t// kernel definition (in glsl matrices are filled in column-major order)\\n\\n\\t\\t\\tconst mat3 Gx = mat3( -1, -2, -1, 0, 0, 0, 1, 2, 1 ); // x direction kernel\\n\\t\\t\\tconst mat3 Gy = mat3( -1, 0, 1, -2, 0, 2, -1, 0, 1 ); // y direction kernel\\n\\n\\t\\t// fetch the 3x3 neighbourhood of a fragment\\n\\n\\t\\t// first column\\n\\n\\t\\t\\tfloat tx0y0 = texture2D( tDiffuse, vUv + texel * vec2( -1, -1 ) ).r;\\n\\t\\t\\tfloat tx0y1 = texture2D( tDiffuse, vUv + texel * vec2( -1,  0 ) ).r;\\n\\t\\t\\tfloat tx0y2 = texture2D( tDiffuse, vUv + texel * vec2( -1,  1 ) ).r;\\n\\n\\t\\t// second column\\n\\n\\t\\t\\tfloat tx1y0 = texture2D( tDiffuse, vUv + texel * vec2(  0, -1 ) ).r;\\n\\t\\t\\tfloat tx1y1 = texture2D( tDiffuse, vUv + texel * vec2(  0,  0 ) ).r;\\n\\t\\t\\tfloat tx1y2 = texture2D( tDiffuse, vUv + texel * vec2(  0,  1 ) ).r;\\n\\n\\t\\t// third column\\n\\n\\t\\t\\tfloat tx2y0 = texture2D( tDiffuse, vUv + texel * vec2(  1, -1 ) ).r;\\n\\t\\t\\tfloat tx2y1 = texture2D( tDiffuse, vUv + texel * vec2(  1,  0 ) ).r;\\n\\t\\t\\tfloat tx2y2 = texture2D( tDiffuse, vUv + texel * vec2(  1,  1 ) ).r;\\n\\n\\t\\t// gradient value in x direction\\n\\n\\t\\t\\tfloat valueGx = Gx[0][0] * tx0y0 + Gx[1][0] * tx1y0 + Gx[2][0] * tx2y0 +\\n\\t\\t\\t\\tGx[0][1] * tx0y1 + Gx[1][1] * tx1y1 + Gx[2][1] * tx2y1 +\\n\\t\\t\\t\\tGx[0][2] * tx0y2 + Gx[1][2] * tx1y2 + Gx[2][2] * tx2y2;\\n\\n\\t\\t// gradient value in y direction\\n\\n\\t\\t\\tfloat valueGy = Gy[0][0] * tx0y0 + Gy[1][0] * tx1y0 + Gy[2][0] * tx2y0 +\\n\\t\\t\\t\\tGy[0][1] * tx0y1 + Gy[1][1] * tx1y1 + Gy[2][1] * tx2y1 +\\n\\t\\t\\t\\tGy[0][2] * tx0y2 + Gy[1][2] * tx1y2 + Gy[2][2] * tx2y2;\\n\\n\\t\\t// magnitute of the total gradient\\n\\n\\t\\t\\tfloat G = sqrt( ( valueGx * valueGx ) + ( valueGy * valueGy ) );\\n\\n\\t\\t\\tgl_FragColor = vec4( vec3( G ), 1 );\\n\\n\\t\\t}\"\n};"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":1,"column":0}},{"generated":{"line":7,"column":4},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":1,"column":0},"name":"_three"},{"generated":{"line":7,"column":10},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":1,"column":0}},{"generated":{"line":7,"column":13},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":1,"column":0},"name":"require"},{"generated":{"line":7,"column":20},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":0},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":5,"column":0}},{"generated":{"line":9,"column":0},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":6,"column":0}},{"generated":{"line":10,"column":0},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":7,"column":0}},{"generated":{"line":11,"column":0},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":8,"column":0}},{"generated":{"line":12,"column":0},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":9,"column":0}},{"generated":{"line":13,"column":0},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":10,"column":0}},{"generated":{"line":15,"column":0},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":12,"column":0}},{"generated":{"line":15,"column":4},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":12,"column":6},"name":"SobelOperatorShader"},{"generated":{"line":15,"column":23},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":12,"column":25}},{"generated":{"line":15,"column":26},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":12,"column":25},"name":"exports"},{"generated":{"line":15,"column":33},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":12,"column":25}},{"generated":{"line":15,"column":34},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":12,"column":25},"name":"SobelOperatorShader"},{"generated":{"line":15,"column":53},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":12,"column":25}},{"generated":{"line":15,"column":56},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":12,"column":28}},{"generated":{"line":16,"column":2},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":14,"column":1},"name":"name"},{"generated":{"line":16,"column":6},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":14,"column":5}},{"generated":{"line":16,"column":8},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":14,"column":7}},{"generated":{"line":16,"column":29},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":14,"column":28}},{"generated":{"line":17,"column":2},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":16,"column":1},"name":"uniforms"},{"generated":{"line":17,"column":10},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":16,"column":9}},{"generated":{"line":17,"column":12},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":16,"column":11}},{"generated":{"line":18,"column":4},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":18,"column":2}},{"generated":{"line":18,"column":14},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":18,"column":12}},{"generated":{"line":18,"column":16},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":18,"column":14}},{"generated":{"line":19,"column":6},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":18,"column":16},"name":"value"},{"generated":{"line":19,"column":11},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":18,"column":21}},{"generated":{"line":19,"column":13},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":18,"column":23}},{"generated":{"line":20,"column":4},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":18,"column":28}},{"generated":{"line":20,"column":5},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":18,"column":29}},{"generated":{"line":21,"column":4},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":19,"column":2}},{"generated":{"line":21,"column":16},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":19,"column":14}},{"generated":{"line":21,"column":18},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":19,"column":16}},{"generated":{"line":22,"column":6},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":19,"column":18},"name":"value"},{"generated":{"line":22,"column":11},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":19,"column":23}},{"generated":{"line":22,"column":13},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":19,"column":25}},{"generated":{"line":22,"column":17},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":19,"column":29},"name":"Vector2"},{"generated":{"line":22,"column":31},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":19,"column":36}},{"generated":{"line":22,"column":32},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":19,"column":37}},{"generated":{"line":23,"column":4},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":19,"column":39}},{"generated":{"line":24,"column":2},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":21,"column":1}},{"generated":{"line":24,"column":3},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":21,"column":2}},{"generated":{"line":25,"column":2},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":23,"column":1},"name":"vertexShader"},{"generated":{"line":25,"column":14},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":23,"column":13}},{"generated":{"line":25,"column":16},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":23,"column":15}},{"generated":{"line":25,"column":185},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":33,"column":4}},{"generated":{"line":26,"column":2},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":35,"column":1},"name":"fragmentShader"},{"generated":{"line":26,"column":16},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":35,"column":15}},{"generated":{"line":26,"column":18},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":35,"column":17}},{"generated":{"line":27,"column":0},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":90,"column":0}},{"generated":{"line":27,"column":1},"source":"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js","original":{"line":90,"column":1}}],"sources":{"../node_modules/three/examples/jsm/shaders/SobelOperatorShader.js":"import {\n\tVector2\n} from 'three';\n\n/**\n * Sobel Edge Detection (see https://youtu.be/uihBwtPIBxM)\n *\n * As mentioned in the video the Sobel operator expects a grayscale image as input.\n *\n */\n\nconst SobelOperatorShader = {\n\n\tname: 'SobelOperatorShader',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'resolution': { value: new Vector2() }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform vec2 resolution;\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec2 texel = vec2( 1.0 / resolution.x, 1.0 / resolution.y );\n\n\t\t// kernel definition (in glsl matrices are filled in column-major order)\n\n\t\t\tconst mat3 Gx = mat3( -1, -2, -1, 0, 0, 0, 1, 2, 1 ); // x direction kernel\n\t\t\tconst mat3 Gy = mat3( -1, 0, 1, -2, 0, 2, -1, 0, 1 ); // y direction kernel\n\n\t\t// fetch the 3x3 neighbourhood of a fragment\n\n\t\t// first column\n\n\t\t\tfloat tx0y0 = texture2D( tDiffuse, vUv + texel * vec2( -1, -1 ) ).r;\n\t\t\tfloat tx0y1 = texture2D( tDiffuse, vUv + texel * vec2( -1,  0 ) ).r;\n\t\t\tfloat tx0y2 = texture2D( tDiffuse, vUv + texel * vec2( -1,  1 ) ).r;\n\n\t\t// second column\n\n\t\t\tfloat tx1y0 = texture2D( tDiffuse, vUv + texel * vec2(  0, -1 ) ).r;\n\t\t\tfloat tx1y1 = texture2D( tDiffuse, vUv + texel * vec2(  0,  0 ) ).r;\n\t\t\tfloat tx1y2 = texture2D( tDiffuse, vUv + texel * vec2(  0,  1 ) ).r;\n\n\t\t// third column\n\n\t\t\tfloat tx2y0 = texture2D( tDiffuse, vUv + texel * vec2(  1, -1 ) ).r;\n\t\t\tfloat tx2y1 = texture2D( tDiffuse, vUv + texel * vec2(  1,  0 ) ).r;\n\t\t\tfloat tx2y2 = texture2D( tDiffuse, vUv + texel * vec2(  1,  1 ) ).r;\n\n\t\t// gradient value in x direction\n\n\t\t\tfloat valueGx = Gx[0][0] * tx0y0 + Gx[1][0] * tx1y0 + Gx[2][0] * tx2y0 +\n\t\t\t\tGx[0][1] * tx0y1 + Gx[1][1] * tx1y1 + Gx[2][1] * tx2y1 +\n\t\t\t\tGx[0][2] * tx0y2 + Gx[1][2] * tx1y2 + Gx[2][2] * tx2y2;\n\n\t\t// gradient value in y direction\n\n\t\t\tfloat valueGy = Gy[0][0] * tx0y0 + Gy[1][0] * tx1y0 + Gy[2][0] * tx2y0 +\n\t\t\t\tGy[0][1] * tx0y1 + Gy[1][1] * tx1y1 + Gy[2][1] * tx2y1 +\n\t\t\t\tGy[0][2] * tx0y2 + Gy[1][2] * tx1y2 + Gy[2][2] * tx2y2;\n\n\t\t// magnitute of the total gradient\n\n\t\t\tfloat G = sqrt( ( valueGx * valueGx ) + ( valueGy * valueGy ) );\n\n\t\t\tgl_FragColor = vec4( vec3( G ), 1 );\n\n\t\t}`\n\n};\n\nexport { SobelOperatorShader };\n"},"lineCount":null}},"error":null,"hash":"ce6422af1cca6cbae04f198f34d54325","cacheData":{"env":{}}}