{"id":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","dependencies":[{"name":"C:\\Users\\ADMINWWQ\\Desktop\\threejs\\01-three_basic\\package.json","includedInParent":true,"mtime":1713938217714},{"name":"C:\\Users\\ADMINWWQ\\Desktop\\threejs\\01-three_basic\\node_modules\\three\\package.json","includedInParent":true,"mtime":1713854592536},{"name":"three","loc":{"line":3,"column":7,"index":25},"parent":"C:\\Users\\ADMINWWQ\\Desktop\\threejs\\01-three_basic\\node_modules\\three\\examples\\jsm\\shaders\\FreiChenShader.js","resolved":"C:\\Users\\ADMINWWQ\\Desktop\\threejs\\01-three_basic\\node_modules\\three\\build\\three.module.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FreiChenShader = void 0;\nvar _three = require(\"three\");\n/**\n * Edge Detection Shader using Frei-Chen filter\n * Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n *\n * aspect: vec2 of (1/width, 1/height)\n */\n\nvar FreiChenShader = exports.FreiChenShader = {\n  name: 'FreiChenShader',\n  uniforms: {\n    'tDiffuse': {\n      value: null\n    },\n    'aspect': {\n      value: new _three.Vector2(512, 512)\n    }\n  },\n  vertexShader: /* glsl */\"\\n\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvUv = uv;\\n\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n\\t\\t}\",\n  fragmentShader: /* glsl */\"\\n\\n\\t\\tuniform sampler2D tDiffuse;\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\tuniform vec2 aspect;\\n\\n\\t\\tvec2 texel = vec2( 1.0 / aspect.x, 1.0 / aspect.y );\\n\\n\\n\\t\\tmat3 G[9];\\n\\n\\t\\t// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\\n\\n\\t\\tconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\\n\\t\\tconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\\n\\t\\tconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\\n\\t\\tconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\\n\\t\\tconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\\n\\t\\tconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\\n\\t\\tconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\\n\\t\\tconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\\n\\t\\tconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\\n\\n\\t\\tvoid main(void)\\n\\t\\t{\\n\\n\\t\\t\\tG[0] = g0,\\n\\t\\t\\tG[1] = g1,\\n\\t\\t\\tG[2] = g2,\\n\\t\\t\\tG[3] = g3,\\n\\t\\t\\tG[4] = g4,\\n\\t\\t\\tG[5] = g5,\\n\\t\\t\\tG[6] = g6,\\n\\t\\t\\tG[7] = g7,\\n\\t\\t\\tG[8] = g8;\\n\\n\\t\\t\\tmat3 I;\\n\\t\\t\\tfloat cnv[9];\\n\\t\\t\\tvec3 sample;\\n\\n\\t\\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\\n\\t\\t\\tfor (float i=0.0; i<3.0; i++) {\\n\\t\\t\\t\\tfor (float j=0.0; j<3.0; j++) {\\n\\t\\t\\t\\t\\tsample = texture2D(tDiffuse, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\\n\\t\\t\\t\\t\\tI[int(i)][int(j)] = length(sample);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t/* calculate the convolution values for all the masks */\\n\\t\\t\\tfor (int i=0; i<9; i++) {\\n\\t\\t\\t\\tfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\n\\t\\t\\t\\tcnv[i] = dp3 * dp3;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\\n\\t\\t\\tfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\\n\\n\\t\\t\\tgl_FragColor = vec4(vec3(sqrt(M/S)), 1.0);\\n\\t\\t}\"\n};"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":1,"column":0}},{"generated":{"line":7,"column":4},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":1,"column":0},"name":"_three"},{"generated":{"line":7,"column":10},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":1,"column":0}},{"generated":{"line":7,"column":13},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":1,"column":0},"name":"require"},{"generated":{"line":7,"column":20},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":0},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":5,"column":0}},{"generated":{"line":9,"column":0},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":6,"column":0}},{"generated":{"line":10,"column":0},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":7,"column":0}},{"generated":{"line":11,"column":0},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":8,"column":0}},{"generated":{"line":12,"column":0},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":9,"column":0}},{"generated":{"line":13,"column":0},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":10,"column":0}},{"generated":{"line":15,"column":0},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":12,"column":0}},{"generated":{"line":15,"column":4},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":12,"column":6},"name":"FreiChenShader"},{"generated":{"line":15,"column":18},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":12,"column":20}},{"generated":{"line":15,"column":21},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":12,"column":20},"name":"exports"},{"generated":{"line":15,"column":28},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":12,"column":20}},{"generated":{"line":15,"column":29},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":12,"column":20},"name":"FreiChenShader"},{"generated":{"line":15,"column":43},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":12,"column":20}},{"generated":{"line":15,"column":46},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":12,"column":23}},{"generated":{"line":16,"column":2},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":14,"column":1},"name":"name"},{"generated":{"line":16,"column":6},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":14,"column":5}},{"generated":{"line":16,"column":8},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":14,"column":7}},{"generated":{"line":16,"column":24},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":14,"column":23}},{"generated":{"line":17,"column":2},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":16,"column":1},"name":"uniforms"},{"generated":{"line":17,"column":10},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":16,"column":9}},{"generated":{"line":17,"column":12},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":16,"column":11}},{"generated":{"line":18,"column":4},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":18,"column":2}},{"generated":{"line":18,"column":14},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":18,"column":12}},{"generated":{"line":18,"column":16},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":18,"column":14}},{"generated":{"line":19,"column":6},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":18,"column":16},"name":"value"},{"generated":{"line":19,"column":11},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":18,"column":21}},{"generated":{"line":19,"column":13},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":18,"column":23}},{"generated":{"line":20,"column":4},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":18,"column":28}},{"generated":{"line":20,"column":5},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":18,"column":29}},{"generated":{"line":21,"column":4},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":19,"column":2}},{"generated":{"line":21,"column":12},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":19,"column":10}},{"generated":{"line":21,"column":14},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":19,"column":12}},{"generated":{"line":22,"column":6},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":19,"column":14},"name":"value"},{"generated":{"line":22,"column":11},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":19,"column":19}},{"generated":{"line":22,"column":13},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":19,"column":21}},{"generated":{"line":22,"column":17},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":19,"column":25},"name":"Vector2"},{"generated":{"line":22,"column":31},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":19,"column":32}},{"generated":{"line":22,"column":32},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":19,"column":34}},{"generated":{"line":22,"column":35},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":19,"column":37}},{"generated":{"line":22,"column":37},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":19,"column":39}},{"generated":{"line":22,"column":40},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":19,"column":43}},{"generated":{"line":23,"column":4},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":19,"column":45}},{"generated":{"line":24,"column":2},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":20,"column":1}},{"generated":{"line":24,"column":3},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":20,"column":2}},{"generated":{"line":25,"column":2},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":22,"column":1},"name":"vertexShader"},{"generated":{"line":25,"column":14},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":22,"column":13}},{"generated":{"line":25,"column":16},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":22,"column":15}},{"generated":{"line":25,"column":183},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":31,"column":4}},{"generated":{"line":26,"column":2},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":33,"column":1},"name":"fragmentShader"},{"generated":{"line":26,"column":16},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":33,"column":15}},{"generated":{"line":26,"column":18},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":33,"column":17}},{"generated":{"line":27,"column":0},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":94,"column":0}},{"generated":{"line":27,"column":1},"source":"../node_modules/three/examples/jsm/shaders/FreiChenShader.js","original":{"line":94,"column":1}}],"sources":{"../node_modules/three/examples/jsm/shaders/FreiChenShader.js":"import {\n\tVector2\n} from 'three';\n\n/**\n * Edge Detection Shader using Frei-Chen filter\n * Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n *\n * aspect: vec2 of (1/width, 1/height)\n */\n\nconst FreiChenShader = {\n\n\tname: 'FreiChenShader',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'aspect': { value: new Vector2( 512, 512 ) }\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform sampler2D tDiffuse;\n\t\tvarying vec2 vUv;\n\n\t\tuniform vec2 aspect;\n\n\t\tvec2 texel = vec2( 1.0 / aspect.x, 1.0 / aspect.y );\n\n\n\t\tmat3 G[9];\n\n\t\t// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\n\n\t\tconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\n\t\tconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\n\t\tconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\n\t\tconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\n\t\tconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\n\t\tconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\n\t\tconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\n\t\tconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\n\t\tconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\n\n\t\tvoid main(void)\n\t\t{\n\n\t\t\tG[0] = g0,\n\t\t\tG[1] = g1,\n\t\t\tG[2] = g2,\n\t\t\tG[3] = g3,\n\t\t\tG[4] = g4,\n\t\t\tG[5] = g5,\n\t\t\tG[6] = g6,\n\t\t\tG[7] = g7,\n\t\t\tG[8] = g8;\n\n\t\t\tmat3 I;\n\t\t\tfloat cnv[9];\n\t\t\tvec3 sample;\n\n\t\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\t\t\tfor (float i=0.0; i<3.0; i++) {\n\t\t\t\tfor (float j=0.0; j<3.0; j++) {\n\t\t\t\t\tsample = texture2D(tDiffuse, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\n\t\t\t\t\tI[int(i)][int(j)] = length(sample);\n\t\t\t\t}\n\t\t\t}\n\n\t\t/* calculate the convolution values for all the masks */\n\t\t\tfor (int i=0; i<9; i++) {\n\t\t\t\tfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\n\t\t\t\tcnv[i] = dp3 * dp3;\n\t\t\t}\n\n\t\t\tfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\n\t\t\tfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\n\n\t\t\tgl_FragColor = vec4(vec3(sqrt(M/S)), 1.0);\n\t\t}`\n\n};\n\nexport { FreiChenShader };\n"},"lineCount":null}},"error":null,"hash":"7802351243316628780787eef48331c5","cacheData":{"env":{}}}