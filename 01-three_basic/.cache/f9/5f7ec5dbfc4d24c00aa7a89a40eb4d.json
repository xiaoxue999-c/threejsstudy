{"id":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","dependencies":[{"name":"C:\\Users\\ADMINWWQ\\Desktop\\threejs\\01-three_basic\\package.json","includedInParent":true,"mtime":1713938217714},{"name":"C:\\Users\\ADMINWWQ\\Desktop\\threejs\\01-three_basic\\node_modules\\three\\package.json","includedInParent":true,"mtime":1713854592536},{"name":"three","loc":{"line":3,"column":7,"index":25},"parent":"C:\\Users\\ADMINWWQ\\Desktop\\threejs\\01-three_basic\\node_modules\\three\\examples\\jsm\\shaders\\TriangleBlurShader.js","resolved":"C:\\Users\\ADMINWWQ\\Desktop\\threejs\\01-three_basic\\node_modules\\three\\build\\three.module.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TriangleBlurShader = void 0;\nvar _three = require(\"three\");\n/**\n * Triangle blur shader\n * based on glfx.js triangle blur shader\n * https://github.com/evanw/glfx.js\n *\n * A basic blur filter, which convolves the image with a\n * pyramid filter. The pyramid filter is separable and is applied as two\n * perpendicular triangle filters.\n */\n\nvar TriangleBlurShader = exports.TriangleBlurShader = {\n  name: 'TriangleBlurShader',\n  uniforms: {\n    'texture': {\n      value: null\n    },\n    'delta': {\n      value: new _three.Vector2(1, 1)\n    }\n  },\n  vertexShader: /* glsl */\"\\n\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvUv = uv;\\n\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n\\t\\t}\",\n  fragmentShader: /* glsl */\"\\n\\n\\t\\t#include <common>\\n\\n\\t\\t#define ITERATIONS 10.0\\n\\n\\t\\tuniform sampler2D texture;\\n\\t\\tuniform vec2 delta;\\n\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvec4 color = vec4( 0.0 );\\n\\n\\t\\t\\tfloat total = 0.0;\\n\\n\\t\\t// randomize the lookup values to hide the fixed number of samples\\n\\n\\t\\t\\tfloat offset = rand( vUv );\\n\\n\\t\\t\\tfor ( float t = -ITERATIONS; t <= ITERATIONS; t ++ ) {\\n\\n\\t\\t\\t\\tfloat percent = ( t + offset - 0.5 ) / ITERATIONS;\\n\\t\\t\\t\\tfloat weight = 1.0 - abs( percent );\\n\\n\\t\\t\\t\\tcolor += texture2D( texture, vUv + delta * percent ) * weight;\\n\\t\\t\\t\\ttotal += weight;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tgl_FragColor = color / total;\\n\\n\\t\\t}\"\n};"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":1,"column":0}},{"generated":{"line":7,"column":4},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":1,"column":0},"name":"_three"},{"generated":{"line":7,"column":10},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":1,"column":0}},{"generated":{"line":7,"column":13},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":1,"column":0},"name":"require"},{"generated":{"line":7,"column":20},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":0},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":5,"column":0}},{"generated":{"line":9,"column":0},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":6,"column":0}},{"generated":{"line":10,"column":0},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":7,"column":0}},{"generated":{"line":11,"column":0},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":8,"column":0}},{"generated":{"line":12,"column":0},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":9,"column":0}},{"generated":{"line":13,"column":0},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":10,"column":0}},{"generated":{"line":14,"column":0},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":11,"column":0}},{"generated":{"line":15,"column":0},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":12,"column":0}},{"generated":{"line":16,"column":0},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":13,"column":0}},{"generated":{"line":18,"column":0},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":15,"column":0}},{"generated":{"line":18,"column":4},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":15,"column":6},"name":"TriangleBlurShader"},{"generated":{"line":18,"column":22},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":15,"column":24}},{"generated":{"line":18,"column":25},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":15,"column":24},"name":"exports"},{"generated":{"line":18,"column":32},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":15,"column":24}},{"generated":{"line":18,"column":33},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":15,"column":24},"name":"TriangleBlurShader"},{"generated":{"line":18,"column":51},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":15,"column":24}},{"generated":{"line":18,"column":54},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":15,"column":27}},{"generated":{"line":19,"column":2},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":17,"column":1},"name":"name"},{"generated":{"line":19,"column":6},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":17,"column":5}},{"generated":{"line":19,"column":8},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":17,"column":7}},{"generated":{"line":19,"column":28},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":17,"column":27}},{"generated":{"line":20,"column":2},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":19,"column":1},"name":"uniforms"},{"generated":{"line":20,"column":10},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":19,"column":9}},{"generated":{"line":20,"column":12},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":19,"column":11}},{"generated":{"line":21,"column":4},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":21,"column":2}},{"generated":{"line":21,"column":13},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":21,"column":11}},{"generated":{"line":21,"column":15},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":21,"column":13}},{"generated":{"line":22,"column":6},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":21,"column":15},"name":"value"},{"generated":{"line":22,"column":11},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":21,"column":20}},{"generated":{"line":22,"column":13},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":21,"column":22}},{"generated":{"line":23,"column":4},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":21,"column":27}},{"generated":{"line":23,"column":5},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":21,"column":28}},{"generated":{"line":24,"column":4},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":22,"column":2}},{"generated":{"line":24,"column":11},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":22,"column":9}},{"generated":{"line":24,"column":13},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":22,"column":11}},{"generated":{"line":25,"column":6},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":22,"column":13},"name":"value"},{"generated":{"line":25,"column":11},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":22,"column":18}},{"generated":{"line":25,"column":13},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":22,"column":20}},{"generated":{"line":25,"column":17},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":22,"column":24},"name":"Vector2"},{"generated":{"line":25,"column":31},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":22,"column":31}},{"generated":{"line":25,"column":32},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":22,"column":33}},{"generated":{"line":25,"column":33},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":22,"column":34}},{"generated":{"line":25,"column":35},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":22,"column":36}},{"generated":{"line":25,"column":36},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":22,"column":38}},{"generated":{"line":26,"column":4},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":22,"column":40}},{"generated":{"line":27,"column":2},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":24,"column":1}},{"generated":{"line":27,"column":3},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":24,"column":2}},{"generated":{"line":28,"column":2},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":26,"column":1},"name":"vertexShader"},{"generated":{"line":28,"column":14},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":26,"column":13}},{"generated":{"line":28,"column":16},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":26,"column":15}},{"generated":{"line":28,"column":183},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":35,"column":4}},{"generated":{"line":29,"column":2},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":37,"column":1},"name":"fragmentShader"},{"generated":{"line":29,"column":16},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":37,"column":15}},{"generated":{"line":29,"column":18},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":37,"column":17}},{"generated":{"line":30,"column":0},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":72,"column":0}},{"generated":{"line":30,"column":1},"source":"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js","original":{"line":72,"column":1}}],"sources":{"../node_modules/three/examples/jsm/shaders/TriangleBlurShader.js":"import {\n\tVector2\n} from 'three';\n\n/**\n * Triangle blur shader\n * based on glfx.js triangle blur shader\n * https://github.com/evanw/glfx.js\n *\n * A basic blur filter, which convolves the image with a\n * pyramid filter. The pyramid filter is separable and is applied as two\n * perpendicular triangle filters.\n */\n\nconst TriangleBlurShader = {\n\n\tname: 'TriangleBlurShader',\n\n\tuniforms: {\n\n\t\t'texture': { value: null },\n\t\t'delta': { value: new Vector2( 1, 1 ) }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\t#include <common>\n\n\t\t#define ITERATIONS 10.0\n\n\t\tuniform sampler2D texture;\n\t\tuniform vec2 delta;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 color = vec4( 0.0 );\n\n\t\t\tfloat total = 0.0;\n\n\t\t// randomize the lookup values to hide the fixed number of samples\n\n\t\t\tfloat offset = rand( vUv );\n\n\t\t\tfor ( float t = -ITERATIONS; t <= ITERATIONS; t ++ ) {\n\n\t\t\t\tfloat percent = ( t + offset - 0.5 ) / ITERATIONS;\n\t\t\t\tfloat weight = 1.0 - abs( percent );\n\n\t\t\t\tcolor += texture2D( texture, vUv + delta * percent ) * weight;\n\t\t\t\ttotal += weight;\n\n\t\t\t}\n\n\t\t\tgl_FragColor = color / total;\n\n\t\t}`\n\n};\n\nexport { TriangleBlurShader };\n"},"lineCount":null}},"error":null,"hash":"e7df8ea1266133947eb473409181b28a","cacheData":{"env":{}}}