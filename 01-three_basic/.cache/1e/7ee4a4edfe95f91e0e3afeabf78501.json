{"id":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","dependencies":[{"name":"C:\\Users\\ADMINWWQ\\Desktop\\threejs\\01-three_basic\\package.json","includedInParent":true,"mtime":1713938217714},{"name":"C:\\Users\\ADMINWWQ\\Desktop\\threejs\\01-three_basic\\node_modules\\three\\package.json","includedInParent":true,"mtime":1713854592536}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BleachBypassShader = void 0;\n/**\n * Bleach bypass shader [http://en.wikipedia.org/wiki/Bleach_bypass]\n * - based on Nvidia example\n * http://developer.download.nvidia.com/shaderlibrary/webpages/shader_library.html#post_bleach_bypass\n */\n\nvar BleachBypassShader = exports.BleachBypassShader = {\n  name: 'BleachBypassShader',\n  uniforms: {\n    'tDiffuse': {\n      value: null\n    },\n    'opacity': {\n      value: 1.0\n    }\n  },\n  vertexShader: /* glsl */\"\\n\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvUv = uv;\\n\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n\\t\\t}\",\n  fragmentShader: /* glsl */\"\\n\\n\\t\\tuniform float opacity;\\n\\n\\t\\tuniform sampler2D tDiffuse;\\n\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvec4 base = texture2D( tDiffuse, vUv );\\n\\n\\t\\t\\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\\n\\t\\t\\tfloat lum = dot( lumCoeff, base.rgb );\\n\\t\\t\\tvec3 blend = vec3( lum );\\n\\n\\t\\t\\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\\n\\n\\t\\t\\tvec3 result1 = 2.0 * base.rgb * blend;\\n\\t\\t\\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\\n\\n\\t\\t\\tvec3 newColor = mix( result1, result2, L );\\n\\n\\t\\t\\tfloat A2 = opacity * base.a;\\n\\t\\t\\tvec3 mixRGB = A2 * newColor.rgb;\\n\\t\\t\\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\\n\\n\\t\\t\\tgl_FragColor = vec4( mixRGB, base.a );\\n\\n\\t\\t}\"\n};"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":0},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":2,"column":0}},{"generated":{"line":9,"column":0},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":3,"column":0}},{"generated":{"line":10,"column":0},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":4,"column":0}},{"generated":{"line":11,"column":0},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":5,"column":0}},{"generated":{"line":13,"column":0},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":7,"column":0}},{"generated":{"line":13,"column":4},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":7,"column":6},"name":"BleachBypassShader"},{"generated":{"line":13,"column":22},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":7,"column":24}},{"generated":{"line":13,"column":25},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":7,"column":24},"name":"exports"},{"generated":{"line":13,"column":32},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":7,"column":24}},{"generated":{"line":13,"column":33},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":7,"column":24},"name":"BleachBypassShader"},{"generated":{"line":13,"column":51},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":7,"column":24}},{"generated":{"line":13,"column":54},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":7,"column":27}},{"generated":{"line":14,"column":2},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":9,"column":1},"name":"name"},{"generated":{"line":14,"column":6},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":9,"column":5}},{"generated":{"line":14,"column":8},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":9,"column":7}},{"generated":{"line":14,"column":28},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":9,"column":27}},{"generated":{"line":15,"column":2},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":11,"column":1},"name":"uniforms"},{"generated":{"line":15,"column":10},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":11,"column":9}},{"generated":{"line":15,"column":12},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":11,"column":11}},{"generated":{"line":16,"column":4},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":13,"column":2}},{"generated":{"line":16,"column":14},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":13,"column":12}},{"generated":{"line":16,"column":16},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":13,"column":14}},{"generated":{"line":17,"column":6},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":13,"column":16},"name":"value"},{"generated":{"line":17,"column":11},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":13,"column":21}},{"generated":{"line":17,"column":13},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":13,"column":23}},{"generated":{"line":18,"column":4},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":13,"column":28}},{"generated":{"line":18,"column":5},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":13,"column":29}},{"generated":{"line":19,"column":4},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":14,"column":2}},{"generated":{"line":19,"column":13},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":14,"column":11}},{"generated":{"line":19,"column":15},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":14,"column":13}},{"generated":{"line":20,"column":6},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":14,"column":15},"name":"value"},{"generated":{"line":20,"column":11},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":14,"column":20}},{"generated":{"line":20,"column":13},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":14,"column":22}},{"generated":{"line":21,"column":4},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":14,"column":26}},{"generated":{"line":22,"column":2},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":16,"column":1}},{"generated":{"line":22,"column":3},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":16,"column":2}},{"generated":{"line":23,"column":2},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":18,"column":1},"name":"vertexShader"},{"generated":{"line":23,"column":14},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":18,"column":13}},{"generated":{"line":23,"column":16},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":18,"column":15}},{"generated":{"line":23,"column":183},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":27,"column":4}},{"generated":{"line":24,"column":2},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":29,"column":1},"name":"fragmentShader"},{"generated":{"line":24,"column":16},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":29,"column":15}},{"generated":{"line":24,"column":18},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":29,"column":17}},{"generated":{"line":25,"column":0},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":60,"column":0}},{"generated":{"line":25,"column":1},"source":"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js","original":{"line":60,"column":1}}],"sources":{"../node_modules/three/examples/jsm/shaders/BleachBypassShader.js":"/**\n * Bleach bypass shader [http://en.wikipedia.org/wiki/Bleach_bypass]\n * - based on Nvidia example\n * http://developer.download.nvidia.com/shaderlibrary/webpages/shader_library.html#post_bleach_bypass\n */\n\nconst BleachBypassShader = {\n\n\tname: 'BleachBypassShader',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'opacity': { value: 1.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 base = texture2D( tDiffuse, vUv );\n\n\t\t\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\n\t\t\tfloat lum = dot( lumCoeff, base.rgb );\n\t\t\tvec3 blend = vec3( lum );\n\n\t\t\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\n\n\t\t\tvec3 result1 = 2.0 * base.rgb * blend;\n\t\t\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\n\n\t\t\tvec3 newColor = mix( result1, result2, L );\n\n\t\t\tfloat A2 = opacity * base.a;\n\t\t\tvec3 mixRGB = A2 * newColor.rgb;\n\t\t\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\n\n\t\t\tgl_FragColor = vec4( mixRGB, base.a );\n\n\t\t}`\n\n};\n\nexport { BleachBypassShader };\n"},"lineCount":null}},"error":null,"hash":"178daf82e76112e39e91e55c12fdcb4d","cacheData":{"env":{}}}